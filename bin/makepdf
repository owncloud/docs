#!/usr/bin/env bash

# Each manual build is based on a book template found in the mandatory directory book_templates.
# This script creates pdf versions of the manual.
# If no explicit manual is in the parameter list given, all available manuals are built to pdf.
# If called from the command line, the script user the term "master" as branch reference.
# The script uses another script to provide the attribute list of the yaml files dynamically.

set -e
set -u
set -o noclobber
set -o errexit
set -o pipefail
set -o nounset
IFS=$'\n\t'

# get the full path the the directory the script runs
DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

# define path and file of .yml files to parse for attributes
SITE_YML="${DIR}/../site.yml"
ANTORA_YML="${DIR}/../antora.yml"

# get all the variables defined specific for that repo
source ${DIR}/manual_config_pdf

# define common variables
ACTION=
FAILURE_LEVEL=
MANUAL_NAME=
ACTUAL_BRANCH_NAME=

# the default name is the name used when the branch is master
# this is due to that master does not create a URL component when building
DEFAULT_NAME="next"
MASTER_BRANCH="master"

# the name of the partials directory
PARTIALS_NAME="partials"

DRY_RUN=false

# get the todays date
RELEASE_DATE=$(date +'%B %d, %Y')

# get the number of manuals
NUM_MANUALS="${#AVAILABLE_MANUALS[@]}"

# design related variables
STYLE="owncloud"
STYLES_DIRECTORY="resources/themes"
BOOKS_DIRECTORY="book_templates"
FONTS_DIRECTORY="fonts"

# the target pdf directory must be present and contains a .gitignore file which exludes ALL content
# from being upladed. the directory is used to store local pdf builds. on the server side when running a
# pdf build, the pdf´s are created there - but they will NEVER be added/synced !!
# if there is a pdf on the servers side to be removed, we need to unlik them in den releases from the adoc
# file and tell the sysadmins to remove the pdf from the web folder.
TARGET_PDF_DIRECTORY="pdf_web"

# error variables
ERR_UNSUPPORTED_MANUAL=21
ERR_UNSUPPORTED_ACTION=22

# yamlparse.sh is a script to get a list of key/value pairs from site.yml which
# will then be used as additional dynamically created argument set for asciidoctor-pdf.
# Else the attributes used can´t be resolved and are printed like {key}
source ${DIR}/yamlparse.sh

# get the actual branch the pdf build is made for
# the correct branch name will be printed when the pdf is created.
# check if git is present
if command -v git &> /dev/null; then

	# check if we are on a branch and get the name if we are on one
	# if the branch name is master, use the content of the "default_name" variable
	# for all other cases use the gathered name
	currentbranch=$(git symbolic-ref --short -q HEAD 2>/dev/null)

	case ${currentbranch} in

		"")
		ACTUAL_BRANCH_NAME='No_Branch'
		;;

		${MASTER_BRANCH})
		ACTUAL_BRANCH_NAME=${DEFAULT_NAME}
		;;

		*)
		ACTUAL_BRANCH_NAME=${currentbranch}
		;;

	esac

fi

function usage()
{
	# create a list of modules separated by |
	local list=$(echo ${AVAILABLE_MANUALS[@]} | sed -r 's/[ ]+/|/g')

	echo
	echo "Usage: ./bin/makepdf [-h] [-e] [-c] [-d] [-m] [-n <${list}>]"
	echo
	echo "-h ... help"
	echo "-e ... Set failure level to ERROR (default: FATAL)"
	echo "-c ... clean the ${TARGET_PDF_DIRECTORY}/ directory (contains the locally generated pdf builds)"
	echo "-d ... Debug mode, prints the book to be converted. Only in combination with -m and/or -n"
	echo "-m ... Build ALL available manuals"
	echo "-n ... Build manual <name>. Only in combination with -m"
	echo
}

# clean the directory where the local builds are saved to.
# if we want in a far future files which we want to sync and others not,
# we keep a .gitignore file - even there is already an exclusion of the target
# directory in the root of the repo via .gitignore
function clean_build_dir()
{
	echo "Cleaning ${TARGET_PDF_DIRECTORY}/ directory..."
	find $(pwd)/${TARGET_PDF_DIRECTORY}/ -mindepth 1 ! -iname .gitignore -exec rm -r {} \; 2>/dev/null
	echo "...${TARGET_PDF_DIRECTORY}/ directory has been cleaned."
}

# this function generates asciidoc list items based on the navigation file
# the nav file is handed over as parameter used as stream
function convert_antora_nav_to_asciidoc_list()
{
	local level_offset=
	local nav_filename="$1"

	# have a blank line between the template content end and the beginning of the inserts
	echo

	while read line; do
		if [[ ${line} =~ \]$ ]]; then
			if (("${NUM_MANUALS}" > 1)) ; then
			  # on multi manual repos, the level offset is corrected with 2 (NF-2)
			  level_offset=$(echo "$line" | awk -F"*" '{print NF-2}')
			else
			  # on single manual repos, the level offset is corrected with 1 (NF-1)
			  level_offset=$(echo "$line" | awk -F"*" '{print NF-1}')
			fi
			# when having multi manual repos, the last sed in the line below is to remove
			# the manual component (:manual_name:) from the string
			# this is because we have moved the nav.adoc file into partials and therefore need to add the module
			revised_line=$(echo "$line" | sed 's/xref:/include::{module_base_path}/' | sed 's/\[.*\]//g' | sed -r 's/^\*{1,} //' | sed -e 's/\(module_base_path}\)\(.*:\)/\1/')
			echo "${revised_line}[leveloffset=+${level_offset}]"
			echo
		fi
	done < "${nav_filename}"
}

# validate manual checks if the name of the given manual from the command line
# matches against a name to the available manuals
function validate_manual()
{
	# make a comma-separated list of the modules
	local list=$(echo ${AVAILABLE_MANUALS[@]} | sed -r 's/[ ]+/, /g')
	local manual="$1"

	# ok if manual is in the list of possible manuals
	if [[ ${AVAILABLE_MANUALS[@]} =~ (^|[[:space:]])"${manual}"($|[[:space:]]) ]]; then
	   return 0
	fi

	echo "[${manual}] is not a valid manual."
	echo "Available manuals are: ${list}."
	return $ERR_UNSUPPORTED_MANUAL
}

# this function builds the pdf manual
# it is parametrisized by the "build_manuals" function
function build_pdf_manual()
{
	# manual name
	local manual="$1"

	# manual root
	# the manual root which can differ from the manual name
	# this is true when having only one manual
	local manual_root="$2"

	# todays date
	local release_date="$3"

	# branch name from above
	local branch="$4"

	if [ -z "${FIRST_LETTER_CAPITAL}" ] ; then
		# first letter can also be lower case 
		local manual_infix="${manual}"
	else
		# this name is used as filename and to be printed on the frontpage of the document
		# for pdf print, make the first letter of the manual upper case
		# ${manual:0:1} is the first character
		# ${manual:1} is the rest of the string
		local manual_infix="$(tr '[:lower:]' '[:upper:]' <<< ${manual:0:1})${manual:1}"
	fi

	local build_directory="$(pwd)/${TARGET_PDF_DIRECTORY}/"

	# this is the path component used for the manual to be generated
	# which is either the manual name + postfix or the root name
	local source_root=

	# set the path component where the manual files are located
	if [[ ${manual} == ${manual_root} ]]; then
	  source_root="${manual}${MANUAL_POSTFIX_NAME}"
	else
	  source_root="${manual_root}"
	fi

	# the book file is the template used to create the final document which is then converted to pdf
	local book_file="${BOOKS_DIRECTORY}/ownCloud_${manual_infix}_Manual.adoc"

	# the navigation file for the manual to be built
	local nav_file="modules/${source_root}/${PARTIALS_NAME}/nav.adoc"

	# Get the dynamic list of attributes from yml files
	# The output after sed is a string like -a key=value -a key=value ...
	# For testing, also use the yamltest.sh script
	# You can do the same for extensions like kroki if needed (currently not implemented).
	# Be aware, that the tabs.js extension MUST not be used in case (html only)

	# site.yml (really global)
	local attrib_site=("$(parse_yaml $SITE_YML | grep asciidoc_attributes | sed 's/asciidoc_attributes_/-a /g' | sed 's/\")/\"/' | sed 's/=(/=/' | sed "s/\"'/\'/" | sed "s/'\"/\'/")")

	# antora.yml (branch specific)
	local attrib_antora=("$(parse_yaml $ANTORA_YML | grep asciidoc_attributes | sed 's/asciidoc_attributes_/-a /g' | sed 's/\")/\"/' | sed 's/=(/=/' | sed "s/\"'/\'/" | sed "s/'\"/\'/")")

	# concatenate them properly
	local attributes=$(printf "%s\n%s\n" "${attrib_site}" "${attrib_antora}")

	if [[ "$DRY_RUN" == true ]]; then
		echo "Manual Generation - **DRY RUN**"
		echo
		echo "${manual} manual would be created with the following content:"
		echo
		cat $book_file <(convert_antora_nav_to_asciidoc_list "${nav_file}")
		return 0
	fi

	echo
	echo "Generating:  ${manual} manual"
	echo "From branch: ${branch}"
	echo "Dated:       ${release_date}"
	echo

	# even that schould not be necessary, create the local pdf directoy
	mkdir -p "$build_directory"

	# https://docs.asciidoctor.org/asciidoctor.js/latest/cli/options/

	# Create argument list, necessary as we have dynamic attributes coming from another file
	# The param string needs to be properly constructed, please be careful, see comment below.
	# Note regarding the attribute: allow-uri-read
	# For details read the comment in ./lib/extensions/remote-include-processor.js

	param=''
	param+='-d book '
	param+='-a pdf-stylesdir='${STYLES_DIRECTORY}/' '
	param+='-a pdf-fontsdir='${FONTS_DIRECTORY}' '
	param+='-a pdf-style='${STYLE}' '
	param+='-a format="pdf" '
#	param+='-a experimental="" ' #   experimental already set in site.yml
	param+='-a examplesdir='$(pwd)/modules/${source_root}/examples/' '
	param+='-a imagesdir='$(pwd)/modules/${source_root}/images/' '
	param+='-a partialsdir='$(pwd)/modules/${source_root}/partials/' '
	param+='-a revnumber='${branch}' '
	param+='-a revdate="'${release_date}'" '
	param+='-a allow-uri-read="" '
	param+="$attributes"' '
	param+='--base-dir '$(pwd)' '
	param+='--out-file '${build_directory}/${branch}_ownCloud_${manual_infix}_Manual.pdf' '

# temporary add in case of issues
#	param+='--trace '
#	param+='--verbose '

# please uncomment in case you want/need debugging
#	echo "Parameterlist, useful for debugging"
#	echo $param
#	echo
#	cat $book_file <(convert_antora_nav_to_asciidoc_list "${nav_file}")
#	exit

#	createpdf="asciidoctor-pdf ${FAILURE_LEVEL} ${param} - < <(cat ${book_file})"

	createpdf="asciidoctor-pdf ${FAILURE_LEVEL} ${param} - < <(cat ${book_file} <(convert_antora_nav_to_asciidoc_list ${nav_file}))"

	eval ${createpdf}

}

# this function is called when the -m (build) option is passed on the command line
# the optional manual name comes also from the command line
function build_manuals()
{
	local actual_manual

	# if no specific manual is named, then build them all, even only one manual is avalable
	# the manual name comes from the available manuals array
	if [ -z "${MANUAL_NAME}" ]; then
		for actual_manual in "${AVAILABLE_MANUALS[@]}"
		do
			# depending if there is only one manual in the available array, the entry point may be named differently
			if (("${NUM_MANUALS}" > 1)) ; then
			   # if there are more than one manuals in the array of available one
			   build_pdf_manual "${actual_manual}" "${actual_manual}" "${RELEASE_DATE}" "${ACTUAL_BRANCH_NAME}"
			else
			   # if there is only one manual in the array of available one
			   build_pdf_manual "${actual_manual}" "${MANUAL_ROOT_NAME}" "${RELEASE_DATE}" "${ACTUAL_BRANCH_NAME}"
			fi
		done

	# build only the given manual
	else
		# first check if the manual name given is a valid one out of the available one
		validate_manual "${MANUAL_NAME}" 

		# depending if there is only one manual in the available array, the entry point may be named differently
		if (("${NUM_MANUALS}" > 1)) ; then
		# if there are more than one manuals in the array of available one
		   build_pdf_manual "${MANUAL_NAME}" "${MANUAL_NAME}" "${RELEASE_DATE}" "${ACTUAL_BRANCH_NAME}"
		else
		   # if there is only one manual in the array of available one
		   build_pdf_manual "{$MANUAL_NAME}" "${MANUAL_ROOT_NAME}" "${RELEASE_DATE}" "${ACTUAL_BRANCH_NAME}"
		fi
	fi
}

while getopts ":hecdmn:" o
do
	case ${o} in
		d )
			DRY_RUN=true
			;;
		n )
			MANUAL_NAME=$OPTARG
			;;
		m )
			ACTION="BUILD_MANUALS"
			;;
		c )
			ACTION="CLEAN"
			;;
		e )
			FAILURE_LEVEL='--failure-level=ERROR'
			;;
		: )
			echo "Invalid option: $OPTARG requires an argument" 1>&2
			exit 1
			;;
		h|* )
			ACTION="HELP"
			;;
	esac
done

shift $((OPTIND-1))

case "$ACTION" in
	BUILD_MANUALS)
		build_manuals
		;;
	CLEAN)
		clean_build_dir
		;;
	HELP | *)
		usage
		exit $ERR_UNSUPPORTED_ACTION
		;;
esac
